generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String      @id @db.Uuid
  name              String?
  email             String?     @unique
  emailVerified     DateTime?   @map("email_verified") @db.Timestamp(6)
  image             String?
  role              String?     @default("user")
  isAdmin           Boolean?    @default(false) @map("is_admin")
  buildingNumber    String?     @map("building_number")
  apartmentNumber   String?     @map("apartment_number")
  phoneNumber       String?     @map("phone_number")
  isVerifiedOwner   Boolean?    @default(false) @map("is_verified_owner")
  permissions       String[]
  preferredLanguage String?     @default("french") @map("preferred_language")
  createdAt         DateTime?   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  is_verified       Boolean?    @default(false)
  audit_log         audit_log[]
  documents         Document[]
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

model Document {
  id                   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String
  description          String?
  filePath             String     @map("file_path")
  fileType             String     @map("file_type")
  fileSize             BigInt     @map("file_size")
  category             String
  language             String?    @default("fr")
  is_public            Boolean?   @default(false)
  viewCount            Int?       @default(0) @map("view_count")
  downloadCount        Int?       @default(0) @map("download_count")
  createdAt            DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  created_by           String?    @db.Uuid
  original_document_id String?    @db.Uuid
  is_translation       Boolean?   @default(false)
  users                User?      @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  documents            Document?  @relation("documentsTodocuments", fields: [original_document_id], references: [id], onUpdate: NoAction)
  other_documents      Document[] @relation("documentsTodocuments")

  @@map("documents")
}

model Account {
  id                String  @id
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Allowlist {
  id        String   @id
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("allowlist")
}

model OwnerRegistration {
  id                String             @id
  email             String             @unique
  name              String
  buildingNumber    String             @map("building_number")
  apartmentNumber   String             @map("apartment_number")
  phoneNumber       String             @map("phone_number")
  status            RegistrationStatus @default(pending)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  notes             String?
  preferredLanguage Language           @default(french) @map("preferred_language")

  @@map("owner_registrations")
}

model Session {
  id           String   @id
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?  @db.Uuid
  action      String
  entity_type String
  entity_id   String
  details     Json?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  users       User?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model document_categories {
  id          String   @id
  name        String
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
}

enum UserRole {
  user
  admin
  contentEditor
}

enum Language {
  french
  arabic
}

enum Permission {
  manageUsers
  manageDocuments
  manageComiteDocuments
  manageSocieteDocuments
  manageLegalDocuments
  approveRegistrations
}

enum RegistrationStatus {
  pending
  approved
  rejected
}

enum DocumentCategory {
  comiteDeSuivi
  societeDeGestion
  legal
  financial
  general
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Allowlist {
  id        String   @id
  email     String   @unique
  createdAt DateTime @default(now())
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OwnerRegistration {
  id                String             @id
  email             String             @unique
  name              String
  buildingNumber    String
  apartmentNumber   String
  phoneNumber       String
  status            RegistrationStatus @default(pending)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  notes             String?
  preferredLanguage Language           @default(french)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String?  @db.Uuid
  action      String
  entity_type String
  entity_id   String
  details     Json?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users?   @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model document_categories {
  id          String   @id
  name        String
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
}

model document_embeddings {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id      String   @db.Uuid
  chunk_index      Int
  content_excerpt  String
  embedding_vector Float[]
  language         Language
  metadata         Json?
  created_at       DateTime @default(now()) @db.Timestamptz(6)

  @@unique([document_id, chunk_index])
  @@index([document_id])
}

model document_search_index {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id     String   @unique @db.Uuid
  searchable_text String
  language        Language
  last_indexed    DateTime @default(now()) @db.Timestamptz(6)
}

model document_summaries {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id  String   @db.Uuid
  language     Language
  summary_text String
  key_points   String[]
  word_count   Int
  reading_time Int
  confidence   Float?
  generated_by String
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)

  @@unique([document_id, language])
  @@index([language])
}

model document_translations {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id          String            @db.Uuid
  source_language      Language
  target_language      Language
  status               TranslationStatus @default(pending)
  translated_content   String?
  confidence_score     Float?
  quality_score        Float?
  service_used         String?
  job_id               String?
  requested_by         String            @db.Uuid
  started_at           DateTime?         @db.Timestamptz(6)
  completed_at         DateTime?         @db.Timestamptz(6)
  error_message        String?
  estimated_cost_cents Int?
  actual_cost_cents    Int?
  progress             Int?              @default(0)
  user_rating          Int?
  user_feedback        String?
  notes                String?
  created_at           DateTime          @default(now()) @db.Timestamptz(6)
  updated_at           DateTime          @default(now()) @db.Timestamptz(6)

  @@unique([document_id, target_language])
  @@index([requested_by])
  @@index([status])
}

model document_versions {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  document_id     String   @db.Uuid
  version_number  Int
  file_path       String
  file_size       BigInt
  changes_summary String?
  uploaded_by     String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamptz(6)

  @@unique([document_id, version_number])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model documents {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String
  description          String?
  file_path            String
  file_type            String
  file_size            BigInt
  category             String
  language             String?     @default("fr")
  is_public            Boolean?    @default(false)
  view_count           Int?        @default(0)
  download_count       Int?        @default(0)
  created_at           DateTime    @default(now()) @db.Timestamptz(6)
  updated_at           DateTime    @default(now()) @db.Timestamptz(6)
  created_by           String?     @db.Uuid
  original_document_id String?     @db.Uuid
  is_translation       Boolean?    @default(false)
  searchable_text      String?
  users                users?      @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  documents            documents?  @relation("documentsTodocuments", fields: [original_document_id], references: [id], onUpdate: NoAction)
  other_documents      documents[] @relation("documentsTodocuments")
}

model feature_flags {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String   @unique
  description        String?
  is_enabled         Boolean  @default(false)
  rollout_percentage Int      @default(0)
  user_groups        String[]
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  updated_at         DateTime @default(now()) @db.Timestamptz(6)
}

model notification_preferences {
  id         String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String                @db.Uuid
  type       NotificationType
  email      Boolean               @default(true)
  whatsapp   Boolean               @default(false)
  frequency  NotificationFrequency @default(immediate)
  created_at DateTime              @default(now()) @db.Timestamptz(6)
  updated_at DateTime              @default(now()) @db.Timestamptz(6)

  @@unique([user_id, type])
}

model notification_templates {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String           @unique
  subject    String
  body       String
  type       NotificationType
  language   Language
  is_active  Boolean          @default(true)
  created_at DateTime         @default(now()) @db.Timestamptz(6)
  updated_at DateTime         @default(now()) @db.Timestamptz(6)
}

model notifications {
  id            String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  template_id   String?             @db.Uuid
  user_id       String              @db.Uuid
  type          NotificationType
  channel       NotificationChannel
  subject       String
  body          String
  status        NotificationStatus  @default(pending)
  sent_at       DateTime?           @db.Timestamptz(6)
  read_at       DateTime?           @db.Timestamptz(6)
  error_message String?
  metadata      Json?
  created_at    DateTime            @default(now()) @db.Timestamptz(6)

  @@index([user_id, status])
}

model performance_metrics {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metric_name String
  value       Float
  unit        String
  tags        Json?
  recorded_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([metric_name, recorded_at])
}

model poll_options {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poll_id     String   @db.Uuid
  option_text String
  order_index Int
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@index([poll_id])
}

model poll_translations {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poll_id     String   @db.Uuid
  language    Language
  question    String
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@unique([poll_id, language])
}

model polls {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question       String
  description    String?
  poll_type      PollType   @default(single_choice)
  status         PollStatus @default(draft)
  is_anonymous   Boolean    @default(true)
  allow_comments Boolean    @default(false)
  start_date     DateTime?  @db.Timestamptz(6)
  end_date       DateTime?  @db.Timestamptz(6)
  created_by     String     @db.Uuid
  created_at     DateTime   @default(now()) @db.Timestamptz(6)
  updated_at     DateTime   @default(now()) @db.Timestamptz(6)

  @@index([created_by])
  @@index([status])
}

model qa_conversations {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?  @db.Uuid
  whatsapp_contact_id String?  @db.Uuid
  session_id          String
  language            Language @default(french)
  started_at          DateTime @default(now()) @db.Timestamptz(6)
  last_activity       DateTime @default(now()) @db.Timestamptz(6)

  @@index([user_id])
  @@index([whatsapp_contact_id])
}

model qa_interactions {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id  String   @db.Uuid
  question         String
  answer           String
  sources_used     String[]
  confidence_score Float?
  response_time_ms Int?
  tokens_used      Int?
  cost_cents       Int?
  feedback_rating  Int?
  feedback_comment String?
  created_at       DateTime @default(now()) @db.Timestamptz(6)

  @@index([conversation_id])
}

model system_settings {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key         String   @unique
  value       String
  description String?
  category    String
  is_public   Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  @@index([category])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id                 String      @id @db.Uuid
  name               String?
  email              String?     @unique
  email_verified     DateTime?   @db.Timestamp(6)
  image              String?
  role               String?     @default("user")
  is_admin           Boolean?    @default(false)
  building_number    String?
  apartment_number   String?
  phone_number       String?
  is_verified_owner  Boolean?    @default(false)
  permissions        String[]
  preferred_language String?     @default("french")
  created_at         DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?   @default(now()) @db.Timestamptz(6)
  is_verified        Boolean?    @default(false)
  audit_log          audit_log[]
  documents          documents[]
}

model votes {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poll_id    String   @db.Uuid
  option_id  String   @db.Uuid
  user_id    String   @db.Uuid
  comment    String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@unique([poll_id, user_id])
  @@index([poll_id, user_id])
}

model whatsapp_contacts {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String         @unique @db.Uuid
  phone_number      String         @unique
  country_code      String
  is_verified       Boolean        @default(false)
  verification_code String?
  opt_in_date       DateTime?      @db.Timestamptz(6)
  opt_out_date      DateTime?      @db.Timestamptz(6)
  status            WhatsAppStatus @default(pending)
  last_message_at   DateTime?      @db.Timestamptz(6)
  created_at        DateTime       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime       @default(now()) @db.Timestamptz(6)

  @@index([phone_number])
  @@index([status])
}

model whatsapp_digest_logs {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contact_id      String       @db.Uuid
  digest_type     DigestType
  period_start    DateTime     @db.Timestamptz(6)
  period_end      DateTime     @db.Timestamptz(6)
  content_summary Json
  message_id      String?      @db.Uuid
  status          DigestStatus @default(generated)
  sent_at         DateTime?    @db.Timestamptz(6)
  created_at      DateTime     @default(now()) @db.Timestamptz(6)

  @@index([contact_id])
}

model whatsapp_group_messages {
  id                  String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  group_id            String                   @db.Uuid
  message_type        WhatsAppGroupMessageType
  content             String
  whatsapp_message_id String?
  status              MessageStatus            @default(pending)
  error_message       String?
  sent_at             DateTime                 @default(now()) @db.Timestamptz(6)
  created_at          DateTime                 @default(now()) @db.Timestamptz(6)

  @@index([group_id])
  @@index([message_type])
  @@index([sent_at])
}

model whatsapp_groups {
  id                String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  whatsapp_group_id String                @unique
  category          WhatsAppGroupCategory
  description       String?
  language          Language              @default(french)
  is_active         Boolean               @default(true)
  created_at        DateTime              @default(now()) @db.Timestamptz(6)
  updated_at        DateTime              @default(now()) @db.Timestamptz(6)

  @@index([category])
  @@index([is_active])
}

model whatsapp_messages {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contact_id    String           @db.Uuid
  direction     MessageDirection
  message_type  MessageType      @default(text)
  content       String
  template_name String?
  template_data Json?
  whatsapp_id   String?
  status        MessageStatus    @default(pending)
  error_message String?
  sent_at       DateTime?        @db.Timestamptz(6)
  delivered_at  DateTime?        @db.Timestamptz(6)
  read_at       DateTime?        @db.Timestamptz(6)
  created_at    DateTime         @default(now()) @db.Timestamptz(6)

  @@index([contact_id])
  @@index([status])
}

enum DigestStatus {
  generated
  sent
  failed
  skipped
}

enum DigestType {
  daily
  weekly
  monthly
  on_demand
}

enum DocumentCategory {
  comiteDeSuivi
  societeDeGestion
  legal
  financial
  general
  bylaw
  maintenance
  announcement
  meeting_minutes
  other
}

enum Language {
  french
  arabic
}

enum MessageDirection {
  inbound
  outbound
}

enum MessageStatus {
  pending
  sent
  delivered
  read
  failed
}

enum MessageType {
  text
  template
  document
  image
  interactive
}

enum NotificationChannel {
  email
  whatsapp
  in_app
}

enum NotificationFrequency {
  immediate
  daily
  weekly
  monthly
  disabled
}

enum NotificationStatus {
  pending
  sent
  delivered
  failed
  cancelled
}

enum NotificationType {
  document_uploaded
  document_translated
  poll_created
  poll_reminder
  poll_results
  system_announcement
  whatsapp_digest
  admin_action
}

enum Permission {
  manageUsers
  manageDocuments
  manageComiteDocuments
  manageSocieteDocuments
  manageLegalDocuments
  approveRegistrations
}

enum PollStatus {
  draft
  published
  closed
  archived
}

enum PollType {
  single_choice
  multiple_choice
  yes_no
  rating
}

enum RegistrationStatus {
  pending
  approved
  rejected
}

enum TranslationStatus {
  pending
  in_progress
  completed
  failed
  cancelled
}

enum UserRole {
  user
  admin
  contentEditor
}

enum WhatsAppGroupCategory {
  documents
  polls
  emergency
  general
}

enum WhatsAppGroupMessageType {
  document_notification
  poll_notification
  emergency
  general
  weekly_digest
  system_announcement
}

enum WhatsAppStatus {
  pending
  verified
  opted_in
  opted_out
  blocked
}

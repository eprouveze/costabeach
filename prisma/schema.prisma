generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String       @id @db.Uuid
  name              String?
  email             String?      @unique
  emailVerified     DateTime?    @map("email_verified") @db.Timestamp(6)
  image             String?
  createdAt         DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  login             String?
  role              String       @default("user")
  isAdmin           Boolean      @default(false) @map("is_admin")
  apartmentNumber   String?      @map("apartment_number")
  buildingNumber    String?      @map("building_number")
  isVerifiedOwner   Boolean      @default(false) @map("is_verified_owner")
  permissions       String[]
  phoneNumber       String?      @map("phone_number")
  preferredLanguage String       @default("french") @map("preferred_language")
  accounts          Account[]
  documents         Document[]
  sessions          Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("allowlist")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model OwnerRegistration {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  buildingNumber    String   @map("building_number")
  apartmentNumber   String   @map("apartment_number")
  phoneNumber       String   @map("phone_number")
  status            String   @default("pending")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  notes             String?
  preferredLanguage String   @default("french") @map("preferred_language")

  @@map("owner_registrations")
}

model Document {
  id                   String   @id @default(cuid())
  title                String
  description          String?
  filePath             String   @map("file_path")
  fileSize             Int      @map("file_size")
  fileType             String   @map("file_type")
  category             String
  language             String
  translatedDocumentId String?  @map("translated_document_id")
  isTranslated         Boolean  @default(false) @map("is_translated")
  isPublished          Boolean  @default(true) @map("is_published")
  viewCount            Int      @default(0) @map("view_count")
  downloadCount        Int      @default(0) @map("download_count")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  authorId             String   @map("author_id")
  author               User     @relation(fields: [authorId], references: [id])
  // Temporarily commented out self-relation until column exists
  // translatedDocument   Document? @relation("DocumentTranslation", fields: [translatedDocumentId], references: [id])
  // translations         Document[] @relation("DocumentTranslation")

  @@map("documents")
}

// The following enums are for TypeScript type safety only
// In the database, these values are stored as strings

// User roles
enum UserRole {
  user
  admin
  contentEditor
}

// Supported languages
enum Language {
  french
  arabic
}

// User permissions
enum Permission {
  manageUsers
  manageDocuments
  manageComiteDocuments
  manageSocieteDocuments
  manageLegalDocuments
  approveRegistrations
}

// Registration status values
enum RegistrationStatus {
  pending
  approved
  rejected
}

// Document categories
enum DocumentCategory {
  comiteDeSuivi
  societeDeGestion
  legal
  financial
  general
}

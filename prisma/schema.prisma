generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  login          String?
  role           UserRole  @default(user)
  isAdmin        Boolean   @default(false)
  
  // Owner specific fields
  buildingNumber String?
  apartmentNumber String?
  phoneNumber    String?
  isVerifiedOwner Boolean  @default(false)
  
  // Permission fields
  permissions    Permission[]
  preferredLanguage Language @default(french)
  
  accounts       Account[]
  sessions       Session[]
  documents      Document[] // Documents created by this user
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
  contentEditor
}

enum Language {
  french
  arabic
}

enum Permission {
  manageUsers
  manageDocuments
  manageComiteDocuments
  manageSocieteDocuments
  manageLegalDocuments
  approveRegistrations
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OwnerRegistration {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String
  buildingNumber  String
  apartmentNumber String
  phoneNumber     String
  status          RegistrationStatus @default(pending)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  notes           String?   // For admin comments
  preferredLanguage Language @default(french)
}

enum RegistrationStatus {
  pending
  approved
  rejected
}

enum DocumentCategory {
  comiteDeSuivi
  societeDeGestion
  legal
  financial
  general
}

model Document {
  id              String    @id @default(cuid())
  title           String
  description     String?
  filePath        String    // S3 path
  fileSize        Int       // Size in bytes
  fileType        String    // MIME type
  category        DocumentCategory
  language        Language
  translatedDocumentId String?   // Reference to translated version if exists
  translatedDocument   Document?  @relation("DocumentTranslation", fields: [translatedDocumentId], references: [id])
  translations    Document[] @relation("DocumentTranslation")
  isTranslated    Boolean   @default(false)
  isPublished     Boolean   @default(true)
  viewCount       Int       @default(0)
  downloadCount   Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  authorId        String
  author          User      @relation(fields: [authorId], references: [id])
}
